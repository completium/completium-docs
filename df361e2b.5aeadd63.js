(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{87:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return m})),t.d(a,"rightToc",(function(){return O})),t.d(a,"default",(function(){return u}));var n=t(2),r=t(6),l=t(0),o=t.n(l),c=t(91),b=t(82),p=t.n(b);var d,i=function(e){return e.children,o.a.createElement("div",{className:p.a.separator},o.a.createElement("div",{className:p.a.top_separator}),o.a.createElement("div",{className:p.a.bottom_separator}))},s={id:"doc2",title:"Formal specification"},m={unversionedId:"doc2",id:"doc2",isDocsHomePage:!1,title:"Formal specification",description:"Contract invariant",source:"@site/docs/doc2.md",slug:"/doc2",permalink:"/completium/docs/doc2",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/doc2.md",version:"current",sidebar:"someSidebar",previous:{title:"FA 1.2",permalink:"/completium/docs/"},next:{title:"This is Document Number 3",permalink:"/completium/docs/doc3"}},O=[{value:"Contract invariant",id:"contract-invariant",children:[]},{value:"<code>transfer</code> postconditions",id:"transfer-postconditions",children:[{value:"Effect on <code>ledger</code>",id:"effect-on-ledger",children:[]},{value:"Effect on <code>allowance</code>",id:"effect-on-allowance",children:[]},{value:"Explicit <code>fail</code>",id:"explicit-fail",children:[]},{value:"Operations",id:"operations",children:[]}]},{value:"<code>approve</code> postconditions",id:"approve-postconditions",children:[{value:"Effect on <code>ledger</code>",id:"effect-on-ledger-1",children:[]},{value:"Effect on <code>allowance</code>",id:"effect-on-allowance-1",children:[]},{value:"Explicit <code>fail</code>",id:"explicit-fail-1",children:[]},{value:"Operations",id:"operations-1",children:[]}]},{value:"<code>getAllowance</code> getter",id:"getallowance-getter",children:[]},{value:"<code>getBalance</code> getter",id:"getbalance-getter",children:[]},{value:"<code>getTotalSupply</code> getter",id:"gettotalsupply-getter",children:[]}],j=(d="Seperator",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),Object(c.b)("div",e)}),f={rightToc:O};function u(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},f,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"contract-invariant"},"Contract invariant"),Object(c.b)("p",null,"No token is minted: the total number of tokens is equal to the initial totalsupply number of tokens."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{0}","{0}":!0}),"ledger.sum(tokens) = totalsupply\n")),Object(c.b)("h2",{id:"transfer-postconditions"},Object(c.b)("inlineCode",{parentName:"h2"},"transfer")," postconditions"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"specification entry %transfer (%from : address, %to : address, value : nat)\n")),Object(c.b)("h3",{id:"effect-on-ledger"},"Effect on ",Object(c.b)("inlineCode",{parentName:"h3"},"ledger")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"When the ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," address is different from the ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," address, the number of tokens ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," possesses is decread by value."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{1,5}","{1,5}":!0}),"%from <> %to ->\nlet some before_ledger_from = before.ledger[%from] in\nlet some after_ledger_from  = ledger[%from] in\nafter_ledger_from = { before_ledger_from with\n  tokens = abs(before_ledger_from.tokens - value)\n}\notherwise false otherwise false\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"When the ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," address is different from the ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," address, the number of tokens ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," possesses is increased by value when ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," is already registered in the ledger, and set to value otherwise. Anyway, ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," is registered in ledger."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{1,5,8}","{1,5,8}":!0}),"%from <> %to ->\nlet some after_ledger_to = ledger[%to] in\nlet some before_ledger_to = before.ledger[%to] in\n  after_ledger_to = { before_ledger_to with\n    tokens = (before_ledger_to.tokens + value)\n  }\notherwise\n  after_ledger_to = { holder = %to; tokens = value }\notherwise false\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"ledger")," when ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," is equal to ",Object(c.b)("inlineCode",{parentName:"p"},"%to"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{1}","{1}":!0}),"%from = %to ->\nledger = before.ledger\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Tokenholders other than ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," and ",Object(c.b)("inlineCode",{parentName:"p"},"%to"),", are not modified nor added to ",Object(c.b)("inlineCode",{parentName:"p"},"ledger"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{4}","{4}":!0}),"forall tokenholder in ledger,\n  tokenholder.holder <> %from ->\n  tokenholder.holder <> %to ->\n  before.ledger[tokenholder.holder] = some(tokenholder)\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"The added record in ",Object(c.b)("inlineCode",{parentName:"p"},"ledger"),", if any, is the ",Object(c.b)("inlineCode",{parentName:"p"},"%to")," record."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{2,4}","{2,4}":!0}),"let some before_to = before.ledger[%to] in\n  added.ledger.isempty()\notherwise\n  added.ledger = [ { holder = %to; tokens = value } ]\n")),Object(c.b)("h3",{id:"effect-on-allowance"},"Effect on ",Object(c.b)("inlineCode",{parentName:"h3"},"allowance")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"When caller is different from ",Object(c.b)("inlineCode",{parentName:"p"},"%from"),", the amount caller is authorised to spend on the behalf of ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," is decreased by value if value is striclty greated than the authorized amount."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"caller <> %from ->\nlet some before_from_caller = before.allowance[(%from,caller)] in\nlet some after_from_caller = allowance[(%from,caller)] in\n  before_from_caller.amount > value ->\n  after_from_caller = { before_from_caller with\n    amount = abs (before_from_caller.amount - value)\n  }\notherwise false\notherwise true\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"allowance")," when ",Object(c.b)("inlineCode",{parentName:"p"},"caller")," is equal to ",Object(c.b)("inlineCode",{parentName:"p"},"%from"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"caller = %from -> allowance = before.allowance\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Allowed amounts other than those associated to ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," and ",Object(c.b)("inlineCode",{parentName:"p"},"caller")," are identical."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{2,3}","{2,3}":!0}),"forall a in allowance,\na.addr_owner <> %from and a.addr_spender <> caller ->\nbefore.allowance[(a.addr_owner,a.addr_spender)] = some(a)\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No allowance record is added or removed."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"removed.allowance.isempty() and added.allowance.isempty()\n")),Object(c.b)("h3",{id:"explicit-fail"},"Explicit ",Object(c.b)("inlineCode",{parentName:"h3"},"fail")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"When the entry fails with message ",Object(c.b)("inlineCode",{parentName:"p"},'"NotEnoughBalance"'),", value is stricly greater than the number of tokens of ",Object(c.b)("inlineCode",{parentName:"p"},"%to"),". Cannot spend more than you own."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),'fails with (msg : string) :\n  let some after_ledger_from = ledger[%from] in\n    msg = "NotEnoughBalance" and\n    after_ledger_from.tokens < value\n  otherwise true\n')),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"When the entry fails with message ",Object(c.b)("inlineCode",{parentName:"p"},'"NotEnoughAllowance"'),", ",Object(c.b)("inlineCode",{parentName:"p"},"caller")," is different from %from and value is stricly greater than the allowed amount for ",Object(c.b)("inlineCode",{parentName:"p"},"%from")," and ",Object(c.b)("inlineCode",{parentName:"p"},"caller"),". A spender cannot spend more than allowed."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),'fails with (msg : string * (nat * nat)) :\n  let some after_allowance_from_caller = allowance[(%from,caller)] in\n    msg = ("NotEnoughAllowance", (value, after_allowance_from_caller.amount)) and\n    caller <> %from and\n    after_allowance_from_caller.amount < value\n  otherwise false\n')),Object(c.b)("h3",{id:"operations"},"Operations"),Object(c.b)("p",null,"No operation generated."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"length(operations) = 0\n")),Object(c.b)("h2",{id:"approve-postconditions"},Object(c.b)("inlineCode",{parentName:"h2"},"approve")," postconditions"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"specification entry approve(spender : address, value : nat)\n")),Object(c.b)("h3",{id:"effect-on-ledger-1"},"Effect on ",Object(c.b)("inlineCode",{parentName:"h3"},"ledger")),Object(c.b)("p",null,"No effect on ledger."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"ledger = before.ledger\n")),Object(c.b)("h3",{id:"effect-on-allowance-1"},"Effect on ",Object(c.b)("inlineCode",{parentName:"h3"},"allowance")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Allowed amount of tokens spendable by ",Object(c.b)("inlineCode",{parentName:"p"},"spender")," on the behalf of ",Object(c.b)("inlineCode",{parentName:"p"},"caller")," is set to ",Object(c.b)("inlineCode",{parentName:"p"},"value"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{4,8,9,10}","{4,8,9,10}":!0}),"let some after_allowance_caller_spender = allowance[(caller,spender)] in\nlet some before_allowance_caller_spender = before.allowance[(caller,spender)] in\n  after_allowance_caller_spender = { before_allowance_caller_spender with\n    amount = value\n  }\notherwise\n  after_allowance_caller_spender = {\n    addr_owner = caller;\n    addr_spender = spender;\n    amount = value\n  }\notherwise false\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Other allowed amounts than the allowed amount of tokens spendable by ",Object(c.b)("inlineCode",{parentName:"p"},"spender")," on the behalf of ",Object(c.b)("inlineCode",{parentName:"p"},"caller"),", are unchanged."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{3}","{3}":!0}),"forall a in allowance,\n  (a.addr_owner, a.addr_spender) <> (caller, spender) ->\n  before.allowance[(a.addr_owner, a.addr_spender)] = some(a)\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"The added ",Object(c.b)("inlineCode",{parentName:"p"},"allowance")," record, if any, is the ",Object(c.b)("inlineCode",{parentName:"p"},"caller")," and ",Object(c.b)("inlineCode",{parentName:"p"},"spender")," one."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype",metastring:"{2,4}","{2,4}":!0}),"let some allowance_caller_spender = before.allowance[(caller, spender)] in\n  added.allowance.isempty()\notherwise\n  added.allowance = [ { addr_owner = caller; addr_spender = spender; amount = value } ]\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No record is removed from allowance."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"removed.allowance.isempty()\n")),Object(c.b)("h3",{id:"explicit-fail-1"},"Explicit ",Object(c.b)("inlineCode",{parentName:"h3"},"fail")),Object(c.b)("p",null,"When the entry fails with message ",Object(c.b)("inlineCode",{parentName:"p"},'"UnsafeAllowanceChange"'),", ",Object(c.b)("inlineCode",{parentName:"p"},"value")," is strictly greater than 0 and the allowed amount of tokens spendable by ",Object(c.b)("inlineCode",{parentName:"p"},"spender")," on the behalf of ",Object(c.b)("inlineCode",{parentName:"p"},"caller")," is not equal to zero."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),'fails with (msg : (string * nat)) :\nlet some allowance_caller_spender = allowance[(caller,spender)] in\n  msg = ("UnsafeAllowanceChange", allowance_caller_spender.amount) and\n  value > 0 and\n  allowance_caller_spender.amount > 0\notherwise false\n')),Object(c.b)("h3",{id:"operations-1"},"Operations"),Object(c.b)("p",null,"No operation generated."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"length(operations) = 0\n")),Object(c.b)("h2",{id:"getallowance-getter"},Object(c.b)("inlineCode",{parentName:"h2"},"getAllowance")," getter"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"specification getter getAllowance (owner : address, spender : address) : nat\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"ledger"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"ledger = before.ledger\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"allowance"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"allowance = before.allowance\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No explicit fail. The entry implicitely fails though if the provided callback is invalid."),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Creates one callback operation."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"length (operations) = 1\n")),Object(c.b)("h2",{id:"getbalance-getter"},Object(c.b)("inlineCode",{parentName:"h2"},"getBalance")," getter"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"specification getter getBalance (owner : address) : nat\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"ledger"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"ledger = before.ledger\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"allowance"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"allowance = before.allowance\n")),Object(c.b)(j,{mdxType:"Seperator"}),Object(c.b)("p",null,"No explicit fail. The entry implicitely fails though if the provided callback is invalid."),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Creates one callback operation."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"length (operations) = 1\n")),Object(c.b)("h2",{id:"gettotalsupply-getter"},Object(c.b)("inlineCode",{parentName:"h2"},"getTotalSupply")," getter"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"specification getter getTotalSupply () : nat\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"ledger"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"ledger = before.ledger\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No effect on ",Object(c.b)("inlineCode",{parentName:"p"},"allowance"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"allowance = before.allowance\n")),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"No explicit fail. The entry implicitely fails though if the provided callback is invalid."),Object(c.b)(i,{mdxType:"Separator"}),Object(c.b)("p",null,"Creates one callback operation."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-archetype"}),"length(operations) = 1\n")))}u.isMDXComponent=!0}}]);